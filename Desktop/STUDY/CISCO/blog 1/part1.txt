[12:55, 08.02.2020] Alisher: Hello! Today is the first part of the project on computer networks. So, let's begin!

We all know and actively use the Internet, but how much do you know how the Internet works? How our requests are processed in browsers, how our messages are sent to friends and others and all that.

For example, I want to take Google. Their servers are located in the USA, but this does not stop them from instantly processing our request and displaying the results on the device’s screen, but how fast? It all depends on the speed of our request, and it is equal to one third of the speed of light! the rest of the time is taken by the server, which processes our request and sends the results.

But there are many servers, how can everything be done without errors? The transport level is responsible for this. What it is?

The transport layer is the layer in the Open Systems Interconnection (OSI) model that is responsible for end-to-end network communications. It provides a logical connection between application processes running on different hosts, as part of a multi-level architecture of protocols and other network components.
The transport layer is also responsible for error correction management, providing quality and reliability for the end user. This level allows the host to send and receive corrected data, packet, or message errors over the network and is a network component that allows multiplexing.

BUT! When data is sent from one host to another, each packet can go on a different path, even if it belongs to the same session. This means that packets may / may not arrive in the correct order. Therefore, to ensure reliability, IP uses higher-level protocols.

TCP (Transmission Control Protocol):
TCP is a layer 4 protocol that provides acknowledgment of received packets and is also reliable because it resends lost packets. This is better than UDP, but because of these features, it has additional overhead. Used by application protocols such as HTTP and FTP.

UDP (User Datagram Protocol):
UDP is also a layer 4 protocol, but unlike TCP it does not provide confirmation of sent packets. Therefore, it is not reliable and depends on higher level protocols for the same. But on the other hand, it is simple, scalable, and requires less overhead than TCP. Used in streaming video and voice.
[13:06, 08.02.2020] Alisher: TCP (Transmission Control Protocol):
TCP is a layer 4 protocol that provides acknowledgment of received packets and is also reliable because it resends lost packets. This is better than UDP, but because of these features, it has additional overhead. Used by application protocols such as HTTP and FTP.

UDP (User Datagram Protocol):
UDP is also a layer 4 protocol, but unlike TCP it does not provide confirmation of sent packets. Therefore, it is not reliable and depends on higher level protocols for the same. But on the other hand, it is simple, scalable, and requires less overhead than TCP. Used in streaming video and voice.
[13:08, 08.02.2020] Alisher: TCP Vs UDP –

Session Multiplexing:
A single host with a single IP address is able to communicate with multiple servers. While using TCP, first a connection must be established between the server and the receiver and the connection is closed when the transfer is completed. TCP also maintains reliability while the transfer is taking place.
UDP on the other hand sends no acknowledgement of receiving the packets. Therefore, provides no reliability.

Segmentation:
Information sent is first broken into smaller chunks for transmission.
Maximum Transmission Unit or MTU of a Fastethernet is 1500 bytes whereas the theoretical value of TCP is 65495 bytes. Therefore, data has to be broken into smaller chunks before being sent to the lower layers. MSS or Maximum Segment Size should be set small enough to avoid fragmentation. TCP supports MSS and Path MTU discovery with which the sender and the receiver can automatically determine the maximum transmission capability.

UDP doesn’t support this; therefore it depends on the higher layer protocols for data segmentation.

Flow Control:
If sender sends data faster than what receiver can process then the receiver will drop the data and then request for a retransmission, leading to wastage of time and resources. TCP provides end-to-end flow control which is realized using a sliding window. The sliding window sends an acknowledgement from receiver’s end regarding the data that the receiver can receive at a time.
UDP doesn’t implement flow control and depends on the higher layer protocols for the same.

Connection Oriented:
TCP is connection oriented, i.e., it creates a connection for the transmission to take place, and once the transfer is over that connection is terminated.
UDP on the other hand is connectionless just like IP (Internet Protocol).

Reliability:
TCP sends an acknowledgement when it receives a packet. It requests a retransmission in case a packet is lost.
UDP relies on the higher layer protocols for the same.